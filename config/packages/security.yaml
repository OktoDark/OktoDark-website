security:
    password_hashers:
        # By default, password hashers are resource intensive and take time. This is
        # important to generate secure password hashes. In tests however, secure hashes
        # are not important, waste resources and increase test times. The following
        # reduces the work factor to the lowest possible values.
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 4 # Lowest possible value for bcrypt
            time_cost: 3 # Lowest possible value for argon
            memory_cost: 10 # Lowest possible value for argon

    providers:
        # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/user_providers.html#using-a-custom-query-to-load-the-user
        database_users:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # this firewall does not have a 'pattern' option because it applies to all URLs
            lazy: true
            provider: database_users
            http_basic: ~

            form_login:
                # The route name that the login form submits to
                check_path: security_login
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login
                # Secure the login form against CSRF
                enable_csrf: true
                # The page users are redirect to when there is no previous page stored in the
                # session (for example when the users access directly to the login page).
                default_target_path: index

            logout:
                # The route name the user can go to in order to logout
                path: logout
                # The name of the route to redirect to after logging out
                target: index

            login_throttling:
                max_attempts: 3
                interval: '15 minutes'

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
                token_provider: 'Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider'

            # needed because in tests we redefine the 'main' firewall to use
            # HTTP Basic instead of he login form, so this firewall has
            # multiple authenticators
            # See https://symfony.com/doc/current/security/access_denied_handler.html#security-entry-point
            entry_point: form_login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/{%app_locales%}/login$', roles: PUBLIC_ACCESS }
        - { path: '^/(%app_locales%)/admin', roles: ROLE_ADMIN }
        - { path: '^/admin', roles: ROLE_ADMIN }

        # Members
        - { path: '^/(%app_locales%)/member', roles: ROLE_MEMBER }

    role_hierarchy:
        ROLE_ADMIN: ROLE_MEMBER

when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        firewalls:
            main:
                http_basic: ~