security:
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        # By default, password hashers are resource intensive and take time. This is
        # important to generate secure password hashes. In tests however, secure hashes
        # are not important, waste resources and increase test times. The following
        # reduces the work factor to the lowest possible values.
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 4 # Lowest possible value for bcrypt
            time_cost: 3 # Lowest possible value for argon
            memory_cost: 10 # Lowest possible value for argon

    providers:
        # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
        # In this example, users are stored via Doctrine in the database
        # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
        # To load users from somewhere else: https://symfony.com/doc/current/security/user_providers.html#using-a-custom-query-to-load-the-user
        database_users:
            entity: { class: App\Entity\User, property: email }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            # this firewall does not have a 'pattern' option because it applies to all URLs
            lazy: true
            provider: database_users
            custom_authenticator: App\Security\FormAuthenticator

            logout:
                # The route name the user can go to in order to logout
                path: logout
                # The name of the route to redirect to after logging out
                target: index

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week in seconds
                path: /
                token_provider: 'Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider'

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/(%app.locales%)/login', roles: PUBLIC_ACCESS }
        - { path: '^/(%app.locales%)/admin', roles: ROLE_ADMIN }
        - { path: '^/admin', roles: ROLE_ADMIN }

        # Members
        - { path: '^/(%app.locales%)/member', roles: ROLE_MEMBER }

    role_hierarchy:
        ROLE_ADMIN: ROLE_MEMBER

when@test:
    # this configuration simplifies testing URLs protected by the security mechanism
    # See https://symfony.com/doc/current/testing/http_authentication.html
    security:
        firewalls:
            main:
                http_basic: ~